## CLI Configuration Template:
## Any CLI argument equivalent properties can be entered here and loaded by
## passing parameter --config=<filename> to the application.
##
## Any corresponding environment variables set in the runtime environment or
## CLI arguments also passed to the CLI override those added here.
##
## Final order of precedence for configuration, from most significant to least,
## is:
##
## 1. CLI argument
## 2. Environment variable
## 3. Configuration property
##
## **NOTE: arguments, variables, and property keys are CASE SENSITIVE.**
##
app.config.file=./config/application.properties

######################
##  Google GLOBAL   ##
######################
# The AWS credentials profile (optional*)
#   * mutually exclusive with accessKey+secretKey[+sessionToken] properties;
#     if not provided, 'default' is presumed
#
# Superseded by -
#   1. CLI parameter: --profile
#   2. Env variable:  VZT_AWS_PROFILE
#
#aws.profile=default

# The user's AWS IAM account access ID key (mandatory*)
#   * mutually exclusive with profile property; must be provided unless
#     shared credentials file (typically, ~/.aws/credentials) is used
#
# Superseded by -
#   1. CLI parameter: --accessKey
#   2. Env variable:  VZT_AWS_ACCESS_KEY
#
#aws.accessKey=userMustProvide

# The user's AWS IAM account access secret key (conditional*)
#   * mutually exclusive with profile property; must be provided if
#     accesskey is provided
#
# Superseded by -
#   1. CLI parameter: --secretKey
#   2. Env variable:  VZT_AWS_SECRET_KEY
#
#aws.secretKey=userMustProvide

# The user's AWS SSO temporary session token (optional)
#
# Superseded by -
#   1. CLI parameter: --sessionToken
#   2. Env variable:  VZT_AWS_SESSION_TOKEN
#
#aws.sessionToken=userMustProvide

# The Google region to access (required)
#
# Superseded by -
#   1. CLI parameter: --region
#   2. Env variable:  CT_GOOGLE_REGION
#
#google.region=us-east1


#########################
##  User Auth Service  ##
#########################
# Run user auth service in test mode*
# (*use internal representations of disconnected services)
#
# Superseded by -
#   1. CLI parameter: --userAuthTestMode
#   2. Env variable:  CT_USERDB_TEST_MODE
#
user.auth.testMode=false

# Host name/IP of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbHost
#   2. Env variable:  CT_USERDB_HOST_IP
#
user.auth.host=vtis-cloudtacts-userdb-mysql

# Host service port of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbPort
#   2. Env variable:  CT_USERDB_PORT_NUM
#
user.auth.port=3306

# Name of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbDatabase
#   2. Env variable:  CT_USERDB_DATABASE
#
user.auth.database=cloudtacts

# Login username for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbLogin
#   2. Env variable:  CT_USERDB_LOGIN_ID
#
user.auth.username=root

# Login password for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbCreds
#   2. Env variable:  CT_USERDB_CREDENTIALS
#
user.auth.password=userMustProvide

# Target name of 'get user info' function for the user auth database*
# (mandatory) (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbGetUserFunction
#   2. Env variable:  CT_USERDB_GET_USER_FUNCTION
#
user.auth.function.getUser=GetUser

# Target name of 'add user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbAddUserFunction
#   2. Env variable:  CT_USERDB_ADD_USER_FUNCTION
#
user.auth.function.addUser=AddUser

# Target name of 'delete user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbDeleteUserFunction
#   2. Env variable:  CT_USERDB_DELETE_USER_FUNCTION
#
user.auth.function.deleteUser=DeleteUser

# Target name of 'update user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbUpdateUserFunction
#   2. Env variable:  CT_USERDB_UPDATE_USER_FUNCTION
#
user.auth.function.updateUser=UpdateUser

# Maximum number of connections to allow in the user auth database connection
# pool.* (mandatory)
# <=0 == unlimited
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxPoolConnections
#   2. Env variable:  CT_USERDB_MAX_IDLE
#
user.auth.max.pool=-1

# Maximum number of idle connections to allow in the user auth database
# connection pool.* (mandatory)
# <=0 == unlimited
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxIdleConnections
#   2. Env variable:  CT_USERDB_MAX_IDLE
#
user.auth.max.idle=2

# Maximum amount of time in seconds allowed for a connection to the user auth
# database to remain idle in the pool.* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxIdleTime
#   2. Env variable:  CT_USERDB_MAX_IDLE_TIME
#
user.auth.max.idleTime=300

# Maximum amount of time in minutes allowed for a connection to remain in the
# the user auth database pool.* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxLifeTime
#   2. Env variable:  CT_USERDB_MAX_LIFE_TIME
#
user.auth.max.lifeTime=30

#-----
# Function test service binding port for user auth database functions* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbFunctionPort
#   2. Env variable:  CT_USERDB_FUNCTION_PORT
#
user.auth.function.testPort=8888


################################
##  Records Handling Service  ##
################################
# Object store bucket name for routed IoT messages
#
# Superseded by -
#   1. CLI parameter --bucketName
#   2. Env variable:  VZT_ROUTER_S3_BUCKETNAME
#
#router.bucketName=vitro-zerotrust

# Apache Kafka server cluster addresses*
# (*'N' = 1-3)
#
# Superseded by -
#   1. CLI parameter(s): --broker'N'
#   2. Env variables(s):  VZT_ROUTER_KAFKA_BROKER_'N'
#
#router.kafka.broker1=userMustProvide

# Apache Kafka server cluster polling type
#
# Valid values include: Instant, Batched, Timed
#
# Superseded by -
#   1. CLI parameter: --kafkaType
#   2. Env variable:  VZT_ROUTER_KAFKA_QUEUE_TYPE
#
#router.kafka.queue.type=Batched

# Apache Kafka server cluster polling interval in seconds*
# (*ignored unless kafkaType = Timed)
#
# Superseded by -
#   1. CLI parameter: --kafkaTime
#   2. Env variable:  VZT_ROUTER_KAFKA_QUEUE_TIME
#
#router.kafka.queue.time=15

# Object storage
#
# Superseded by -
#   1. CLI parameter: --minioID
#   2. Env variable:  VZT_ROUTER_MINIO_ID
#
#router.minio.id=userMustProvide

# MinIO S3-compatible object storage server user password
#
# Superseded by -
#   1. CLI parameter: --minioKey
#   2. Env variable:  VZT_ROUTER_MINIO_ACCESSKEY
#
#router.minio.accessKey=userMustProvide


### TODO ###
######################
##     SECURITY     ##
######################
# Path to the certificate trust store, trust store password, and type of trust
# store (JKS, JCEKS, PKCS12, PKCS11, DKS)
#
#security.truststore.path=userMustProvide
#security.truststore.password=userMustProvide
#security.truststore.type=PKCS12

# Path to the certificate key store, key store password, and type of key store
# (JKS, JCEKS, PKCS12, PKCS11, DKS)
#
#security.keystore.path=userMustProvide
#security.keystore.password=userMustProvide
#security.keystore.type=PKCS12
