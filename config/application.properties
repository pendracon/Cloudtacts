## CLI Configuration Template:
## Any CLI argument equivalent properties can be entered here and loaded by
## passing parameter --config=<filename> to the application.
##
## Any corresponding environment variables set in the runtime environment or
## CLI arguments also passed to the CLI override those added here.
##
## Final order of precedence for configuration, from most significant to least,
## is:
##
## 1. CLI argument
## 2. Environment variable
## 3. Configuration property
##
## **NOTE: arguments, variables, and property keys are CASE SENSITIVE.**
##
app.config.file=./config/application.properties

######################
##  Google GLOBAL   ##
######################
# The cloud provider region to access (required)
#
# Superseded by -
#   1. CLI parameter: --cloudRegion
#   2. Env variable:  CT_CLOUD_REGION
#
cloud.region=us-east1

# The cloud provider project identifier (required)
#
# Superseded by -
#   1. CLI parameter: --cloudProject]
#   2. Env variable:  CT_CLOUD_PROJECT_ID}
#
cloud.project=userMustProvide


#########################
##  User Auth Service  ##
#########################
# Run user auth service in test mode*
# (*use internal representations of disconnected services)
#
# Superseded by -
#   1. CLI parameter: --userAuthTestMode
#   2. Env variable:  CT_USERDB_TEST_MODE
#
user.auth.testMode=false

# Host name/IP of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbHost
#   2. Env variable:  CT_USERDB_HOST_IP
#
user.auth.db.host=vtis-cloudtacts-userdb-mysql

# Host service port of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbPort
#   2. Env variable:  CT_USERDB_PORT_NUM
#
user.auth.db.port=3306

# Name of user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbDatabase
#   2. Env variable:  CT_USERDB_DATABASE
#
user.auth.db.database=cloudtacts

# Login username for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbLogin
#   2. Env variable:  CT_USERDB_LOGIN_ID
#
user.auth.db.username=root

# Login password for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbCreds
#   2. Env variable:  CT_USERDB_CREDENTIALS
#
user.auth.db.password=userMustProvide

# Target name of 'get user info' function for the user auth database*
# (mandatory) (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbGetUserFunction
#   2. Env variable:  CT_USERDB_GET_USER_FUNCTION
#
user.auth.function.getUser=GetUser

# Target name of 'add user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbAddUserFunction
#   2. Env variable:  CT_USERDB_ADD_USER_FUNCTION
#
user.auth.function.addUser=AddUser

# Target name of 'delete user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbDeleteUserFunction
#   2. Env variable:  CT_USERDB_DELETE_USER_FUNCTION
#
user.auth.function.deleteUser=DeleteUser

# Target name of 'update user' function for the user auth database* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbUpdateUserFunction
#   2. Env variable:  CT_USERDB_UPDATE_USER_FUNCTION
#
user.auth.function.updateUser=UpdateUser

# Maximum number of connections to allow in the user auth database connection
# pool.* (mandatory)
# <=0 == unlimited
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxPoolConnections
#   2. Env variable:  CT_USERDB_MAX_IDLE
#
user.auth.max.pool=-1

# Maximum number of idle connections to allow in the user auth database
# connection pool.* (mandatory)
# <=0 == unlimited
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxIdleConnections
#   2. Env variable:  CT_USERDB_MAX_IDLE
#
user.auth.max.idle=2

# Maximum amount of time in seconds allowed for a connection to the user auth
# database to remain idle in the pool.* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxIdleTime
#   2. Env variable:  CT_USERDB_MAX_IDLE_TIME
#
user.auth.max.idleTime=300

# Maximum amount of time in minutes allowed for a connection to remain in the
# the user auth database pool.* (mandatory)
# (*ignored when testMode = true)
#
# Superseded by -
#   1. CLI parameter: --userdbMaxLifeTime
#   2. Env variable:  CT_USERDB_MAX_LIFE_TIME
#
user.auth.max.lifeTime=30

#-----
# Function runner host name or IP for user auth database functions (mandatory)
#
# Superseded by -
#   1. CLI parameter: --userdbFunctionHost
#   2. Env variable:  CT_USERDB_FUNCTION_HOST
#
user.auth.function.host=localhost

# Function test service binding port for user auth database functions (mandatory)
#
# Superseded by -
#   1. CLI parameter: --userdbFunctionPort
#   2. Env variable:  CT_USERDB_FUNCTION_PORT
#
user.auth.function.testPort=8888


################################
##  Records Handling Service  ##
################################
# Object store bucket name for routed IoT messages
#
# Superseded by -
#   1. CLI parameter --storageBucketName
#   2. Env variable:  CT_STORAGE_BUCKETNAME
#
storage.bucketName=userMustProvide
